disjointList 存放圆的HashMap
disjointList.item的结构

criticalscore 低于这个分数的item/feature，是一个target


coord = [lon, lat]


Haversine formula:
// 将角度转换为弧度
function toRadians(degrees) {
  return degrees * Math.PI / 180;
}

// 使用Haversine公式计算两个经纬度之间的距离（单位：千米）
function haversineDistance(lat1, lon1, lat2, lon2) {
  const earthRadiusKm = 6371; // 地球半径（单位：千米）

  const dLat = toRadians(lat2 - lat1);
  const dLon = toRadians(lon2 - lon1);

  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
    Math.sin(dLon / 2) * Math.sin(dLon / 2);

  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

  const distance = earthRadiusKm * c;
  return distance;
}

// 示例使用：
const lat1 = 52.5200; // 第一个点的纬度
const lon1 = 13.4050; // 第一个点的经度

const lat2 = 48.8566; // 第二个点的纬度
const lon2 = 2.3522;  // 第二个点的经度

const distance = haversineDistance(lat1, lon1, lat2, lon2);
console.log(distance); // 输出两个点之间的距离（单位：千米）


